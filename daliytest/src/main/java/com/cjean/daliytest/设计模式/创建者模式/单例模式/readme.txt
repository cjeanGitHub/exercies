1.单例模式
	a.核心作用：
		保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。
	b.常见应用场景
		- windows的Task Manager（任务管理器），就是典型的单例模式
		- windows的RecycleBin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。
		- 项目中，读取配置文件的类，一般也只有一个对象，否则每次使用配置文件数据，每次new一个对象去读。
		- 网站计数器，一般也是采用单例模式实现的，否则难以同步
		- 应用程序的日志应用，一般都采用单例模式实现，这一般是由于共享日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。
		- 数据库连接池一般也是采用单例模式，因为数据库连接是一种数据库资源。
		- 操作系统的文件系统，也是采用单例模式实现的，一个操作系统只能有一个文件系统。
		- Application 也是单例典型的应用（Servlet编程中会涉及）。
		- 在Spring中，每个Bean默认是单例的，这样做是为了便于Spring容器管理。
		- 在Servlet编程中，每个Servlet也是单例的。
		- 在Spring MVC/Struts1 java Web框架中，控制器对象也是单例的。
	c.单例模式的优缺点
		优点：
			- 由于单例模式只产生一个实例，所以减少了系统性能开销，当一个对象的产生需要比较多时，如读取配置、产生其他依赖对象时，
			则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。
			- 单例模式可以在系统设置全局的访问点，优化共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。
			
	d.常见的物种单例模式的实现方式
		- 主要：
			- 饿汉式 （线程安全，调用效率高，但是，不能延时加载）。
			- 懒汉式 （线程安全，调用效率不高，但是，可以支持延时加载）。
		- 其他：
		・	- 双重检测锁式 （由于JVM底层内部模型的原因，偶尔会出现问题切难以复现，不建议使用）
			- 静态内部类式 （线程安全，调用效率高，但是，可以延时加载）
			- 枚举单例 （线程安全，调用效率高，但是，不支持延时加载）
	e.单例模式的破解
		除了枚举单例是基于JVM底层的原因，可以避免被破解，其余四种都会被破解
			破解方式有两种：1.通过反射的原理进行破解；2.通过序列化和反序列化的方式进行破解
		防止单例被破解！！      