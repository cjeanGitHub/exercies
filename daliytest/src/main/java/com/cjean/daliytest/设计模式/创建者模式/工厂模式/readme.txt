1.工厂模式
	a.功能：
		实现创建者和调用者的分离
	b.详细分类
		- 简单工厂模式
			依赖生产同一等级结构中的任意产品。（对新增加的产品，需要修改已有的代码）
		- 工厂方法模式
			用来生产同一等级结构中的产品。（支持增加任意产品）
		- 抽象工厂模式
			用来生产不同产品族的全部产品。（对新增加的产品，无能为力，支持增加产品族）
	c.面向对象设计的基本原则
		OCP（开闭原则 ：Open-Closed Principle）：
			一个软件的实体应当对扩展开放，对修改关闭
		DIP（依赖倒转原则 ：Dependence-Inversion Principle）
			- 要针对接口编程，不要针对实现编程
		LoD（迪米特法则：Law Of Demeter）
			- 只与你直接的朋友通信，不与陌生人通信		
	d.核心本质
		- 实例化对象，用工厂方法代替new操作
		- 将选择实现类、创建对象统一管理和控制，从而将调用者跟我的实现类解耦
	e.模式对比
		简单工厂  VS 工厂方法      
		- 结构复杂度：
			从结构上看，简单工厂模式胜出，简单工厂只需要一个工厂类即可；工厂方法模式随产品
			类的增加，工厂类随之增加，这无疑在结构上来说会越来越复杂，增加了结构复杂度
		- 代码复杂度
			结构复杂度度和代码复杂度是相互矛盾的，简单工厂模式的结构相对简洁，但是随着产品
			的增对，代码的简洁度会越来越低，即代码复杂度会越来越高；但是，工厂方法模式通过
			增加工厂类来化解了代码简洁度的问题，随着产品类的增多，对于工厂方法模式只是在增加
			类的数量，在代码方法并没有变化；
		- 客户端编程难度
			简单工厂模式由于是静态方法调用，并不需要实例化对象；相对于工厂方法模式还是需要
			实例化对象来说，简单工厂 >>> 工厂方法模式的
		- 管理上的难度
			从OCP原则来说，工厂方法模式的完全合规的，并且=拥有强大的扩展性，但是也不是说
			简单工厂模式没有可扩展的能力；简单工厂模式也可以通过修改极少的代码来完成扩展的
			能力，但是会违反OCP原则，但是这对于开发过程中来说并不是很严重的问题，即使SUN
			公司的代码方面也是支持简单工厂模式的
		- 根据设计理论建议：工厂方法模式；但实际上一般采用简单工厂模式（实际运用极多）
	f.工厂模式要点
		- 简单工厂模式（静态工厂模式）
			虽然某种程度上不符合设计原则（OCP-开闭原则），但实际使用最多；
		- 工厂方法模式
			不修改已有类的前提下，通过增加工厂类实现扩展
		- 抽象工厂模式
			不可以增加产品，但是可以增加产品族
	g.工厂模式应用场景
		- JDK中Calendar的getInstance方法
		- JDBC中Connection对象的获取
		- Hibernate中SessionFactory创建Session
		- Spring中IOC容器创建Bean对象
		- XML解析的DocumentBuilderFactory创建解析器对象
		- 反射中Class对象的newInstance方法
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			