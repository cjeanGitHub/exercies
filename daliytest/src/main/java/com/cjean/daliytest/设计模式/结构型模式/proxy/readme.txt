代理模式
	
	作用：
		通过代理去访问想要的对象
		可以详细控制访问谋个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理
		（即AOP的微观实现！！！！）
		
		-AOP（Aspect Oriented Programming面向切面编程Struts2、Spring）
			的核心实现机制
			
	核心角色：
		抽象角色：
			-定义代理角色以及真实角色对外公共方法
		真实角色：
			-实现抽象角色，定义真实角色所实现的业务逻辑，供代理角色调用
			- 关注真正的业务逻辑
		代理角色：
			- 实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加
			自己的操作
			- 将统一的流程控制到代理角色中处理
	
	应用场景：
		- 安全代理：屏蔽对真实角色的直接访问
		- 远程代理： 通过代理类处理远程方法调用（RMI）
		- 延迟加载：先加载轻量级的代理对象，真正需要再加载真实角色对象
		开发框架中的场景：
			- Struts2中拦截器的实现
			- 数据库连接池关闭处理
			- hibernate中延迟加载的实现
			- mybaties中实现拦截器插件
			- Aspext的实现
			- springAop的实现
				- 日志拦截
				- 声明式事务处理
			- web service
			- RMI远程方法调用
		...任何的技术框架中都会应用到代理模式
		
	分类：
		静态代理：
			静态定义代理类
		动态代理：
			动态生成代理类
				-JDK自带动态代理
				-javaassist字节码操作库实现
				-CGLB
				-ASM（底层使用指令，可维护性较差）
		
	